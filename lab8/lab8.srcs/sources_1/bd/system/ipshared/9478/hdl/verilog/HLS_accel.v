// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_accel,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=332872,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=5,HLS_SYN_FF=795,HLS_SYN_LUT=1274}" *)

module HLS_accel (
        ap_clk,
        ap_rst_n,
        INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST,
        INPUT_STREAM_TID,
        INPUT_STREAM_TDEST,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 19'b1;
parameter    ap_ST_fsm_pp0_stage0 = 19'b10;
parameter    ap_ST_fsm_state4 = 19'b100;
parameter    ap_ST_fsm_pp1_stage0 = 19'b1000;
parameter    ap_ST_fsm_state7 = 19'b10000;
parameter    ap_ST_fsm_state8 = 19'b100000;
parameter    ap_ST_fsm_state9 = 19'b1000000;
parameter    ap_ST_fsm_state10 = 19'b10000000;
parameter    ap_ST_fsm_state11 = 19'b100000000;
parameter    ap_ST_fsm_state12 = 19'b1000000000;
parameter    ap_ST_fsm_state13 = 19'b10000000000;
parameter    ap_ST_fsm_state14 = 19'b100000000000;
parameter    ap_ST_fsm_state15 = 19'b1000000000000;
parameter    ap_ST_fsm_state16 = 19'b10000000000000;
parameter    ap_ST_fsm_state17 = 19'b100000000000000;
parameter    ap_ST_fsm_state18 = 19'b1000000000000000;
parameter    ap_ST_fsm_state19 = 19'b10000000000000000;
parameter    ap_ST_fsm_pp2_stage0 = 19'b100000000000000000;
parameter    ap_ST_fsm_state23 = 19'b1000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv10_3FF = 10'b1111111111;
parameter    ap_const_lv32_12 = 32'b10010;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (C_S_AXI_CONTROL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] INPUT_STREAM_TDATA;
input   INPUT_STREAM_TVALID;
output   INPUT_STREAM_TREADY;
input  [3:0] INPUT_STREAM_TKEEP;
input  [3:0] INPUT_STREAM_TSTRB;
input  [3:0] INPUT_STREAM_TUSER;
input  [0:0] INPUT_STREAM_TLAST;
input  [4:0] INPUT_STREAM_TID;
input  [4:0] INPUT_STREAM_TDEST;
output  [31:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [3:0] OUTPUT_STREAM_TKEEP;
output  [3:0] OUTPUT_STREAM_TSTRB;
output  [3:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [4:0] OUTPUT_STREAM_TID;
output  [4:0] OUTPUT_STREAM_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1 : 0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1 : 0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] INPUT_STREAM_data_V_0_data_out;
wire    INPUT_STREAM_data_V_0_vld_in;
wire    INPUT_STREAM_data_V_0_vld_out;
wire    INPUT_STREAM_data_V_0_ack_in;
reg    INPUT_STREAM_data_V_0_ack_out;
reg   [31:0] INPUT_STREAM_data_V_0_payload_A;
reg   [31:0] INPUT_STREAM_data_V_0_payload_B;
reg    INPUT_STREAM_data_V_0_sel_rd;
reg    INPUT_STREAM_data_V_0_sel_wr;
wire    INPUT_STREAM_data_V_0_sel;
wire    INPUT_STREAM_data_V_0_load_A;
wire    INPUT_STREAM_data_V_0_load_B;
reg   [1:0] INPUT_STREAM_data_V_0_state;
wire    INPUT_STREAM_data_V_0_state_cmp_full;
wire    INPUT_STREAM_dest_V_0_vld_in;
reg    INPUT_STREAM_dest_V_0_ack_out;
reg   [1:0] INPUT_STREAM_dest_V_0_state;
reg   [31:0] OUTPUT_STREAM_data_V_1_data_out;
reg    OUTPUT_STREAM_data_V_1_vld_in;
wire    OUTPUT_STREAM_data_V_1_vld_out;
wire    OUTPUT_STREAM_data_V_1_ack_in;
wire    OUTPUT_STREAM_data_V_1_ack_out;
reg   [31:0] OUTPUT_STREAM_data_V_1_payload_A;
reg   [31:0] OUTPUT_STREAM_data_V_1_payload_B;
reg    OUTPUT_STREAM_data_V_1_sel_rd;
reg    OUTPUT_STREAM_data_V_1_sel_wr;
wire    OUTPUT_STREAM_data_V_1_sel;
wire    OUTPUT_STREAM_data_V_1_load_A;
wire    OUTPUT_STREAM_data_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_data_V_1_state;
wire    OUTPUT_STREAM_data_V_1_state_cmp_full;
wire   [3:0] OUTPUT_STREAM_keep_V_1_data_out;
reg    OUTPUT_STREAM_keep_V_1_vld_in;
wire    OUTPUT_STREAM_keep_V_1_vld_out;
wire    OUTPUT_STREAM_keep_V_1_ack_in;
wire    OUTPUT_STREAM_keep_V_1_ack_out;
reg    OUTPUT_STREAM_keep_V_1_sel_rd;
wire    OUTPUT_STREAM_keep_V_1_sel;
reg   [1:0] OUTPUT_STREAM_keep_V_1_state;
wire   [3:0] OUTPUT_STREAM_strb_V_1_data_out;
reg    OUTPUT_STREAM_strb_V_1_vld_in;
wire    OUTPUT_STREAM_strb_V_1_vld_out;
wire    OUTPUT_STREAM_strb_V_1_ack_in;
wire    OUTPUT_STREAM_strb_V_1_ack_out;
reg    OUTPUT_STREAM_strb_V_1_sel_rd;
wire    OUTPUT_STREAM_strb_V_1_sel;
reg   [1:0] OUTPUT_STREAM_strb_V_1_state;
wire   [3:0] OUTPUT_STREAM_user_V_1_data_out;
reg    OUTPUT_STREAM_user_V_1_vld_in;
wire    OUTPUT_STREAM_user_V_1_vld_out;
wire    OUTPUT_STREAM_user_V_1_ack_in;
wire    OUTPUT_STREAM_user_V_1_ack_out;
reg    OUTPUT_STREAM_user_V_1_sel_rd;
wire    OUTPUT_STREAM_user_V_1_sel;
reg   [1:0] OUTPUT_STREAM_user_V_1_state;
reg   [0:0] OUTPUT_STREAM_last_V_1_data_out;
reg    OUTPUT_STREAM_last_V_1_vld_in;
wire    OUTPUT_STREAM_last_V_1_vld_out;
wire    OUTPUT_STREAM_last_V_1_ack_in;
wire    OUTPUT_STREAM_last_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_last_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_last_V_1_payload_B;
reg    OUTPUT_STREAM_last_V_1_sel_rd;
reg    OUTPUT_STREAM_last_V_1_sel_wr;
wire    OUTPUT_STREAM_last_V_1_sel;
wire    OUTPUT_STREAM_last_V_1_load_A;
wire    OUTPUT_STREAM_last_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_last_V_1_state;
wire    OUTPUT_STREAM_last_V_1_state_cmp_full;
wire   [4:0] OUTPUT_STREAM_id_V_1_data_out;
reg    OUTPUT_STREAM_id_V_1_vld_in;
wire    OUTPUT_STREAM_id_V_1_vld_out;
wire    OUTPUT_STREAM_id_V_1_ack_in;
wire    OUTPUT_STREAM_id_V_1_ack_out;
reg    OUTPUT_STREAM_id_V_1_sel_rd;
wire    OUTPUT_STREAM_id_V_1_sel;
reg   [1:0] OUTPUT_STREAM_id_V_1_state;
wire   [4:0] OUTPUT_STREAM_dest_V_1_data_out;
reg    OUTPUT_STREAM_dest_V_1_vld_in;
wire    OUTPUT_STREAM_dest_V_1_vld_out;
wire    OUTPUT_STREAM_dest_V_1_ack_in;
wire    OUTPUT_STREAM_dest_V_1_ack_out;
reg    OUTPUT_STREAM_dest_V_1_sel_rd;
wire    OUTPUT_STREAM_dest_V_1_sel;
reg   [1:0] OUTPUT_STREAM_dest_V_1_state;
reg    INPUT_STREAM_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_735;
wire   [0:0] ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond_flatten8_reg_760;
reg    OUTPUT_STREAM_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] exitcond_flatten1_reg_856;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856;
reg   [10:0] indvar_flatten_reg_219;
reg   [5:0] i_0_i_reg_230;
reg   [5:0] j_0_i_reg_241;
reg   [10:0] indvar_flatten6_reg_252;
reg   [5:0] i1_0_i_reg_263;
reg   [5:0] j2_0_i_reg_274;
reg   [10:0] indvar_flatten1_reg_331;
reg   [5:0] i4_0_i_reg_342;
reg   [5:0] j5_0_i_reg_353;
wire   [0:0] exitcond_flatten_fu_379_p2;
wire   [10:0] indvar_flatten_next_fu_385_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] j_0_i_mid2_fu_403_p3;
reg   [5:0] j_0_i_mid2_reg_744;
wire   [5:0] i_0_i_cast_mid2_v_fu_411_p3;
reg   [5:0] i_0_i_cast_mid2_v_reg_749;
wire   [5:0] j_fu_419_p2;
wire   [0:0] exitcond_flatten8_fu_455_p2;
wire   [10:0] indvar_flatten_next7_fu_461_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [5:0] j2_0_i_mid2_fu_479_p3;
reg   [5:0] j2_0_i_mid2_reg_769;
wire   [5:0] i1_0_i_cast9_mid2_v_fu_487_p3;
reg   [5:0] i1_0_i_cast9_mid2_v_reg_774;
wire   [5:0] j_1_fu_495_p2;
wire   [11:0] tmp_12_cast_fu_539_p1;
reg   [11:0] tmp_12_cast_reg_785;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] exitcond2_i_i_fu_543_p2;
wire   [5:0] ia_fu_549_p2;
reg   [5:0] ia_reg_795;
wire   [11:0] ib_0_i_i_cast6_cast_fu_555_p1;
reg   [11:0] ib_0_i_i_cast6_cast_reg_800;
wire   [0:0] ap_CS_fsm_state9;
reg   [9:0] out_addr_reg_805;
wire   [5:0] ib_fu_575_p2;
reg   [5:0] ib_reg_813;
wire   [0:0] ap_CS_fsm_state10;
wire   [5:0] id_fu_623_p2;
reg   [5:0] id_reg_831;
wire   [31:0] a_q0;
wire   [0:0] ap_CS_fsm_state11;
wire   [31:0] b_q0;
wire   [31:0] grp_fu_369_p2;
reg   [31:0] tmp_s_reg_846;
wire   [0:0] ap_CS_fsm_state14;
wire   [31:0] grp_fu_364_p2;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] exitcond_flatten1_fu_629_p2;
wire   [10:0] indvar_flatten_next1_fu_635_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [5:0] i4_0_i_cast4_mid2_v_fu_661_p3;
reg   [5:0] i4_0_i_cast4_mid2_v_reg_865;
wire   [0:0] last_assign_fu_718_p2;
reg   [0:0] last_assign_reg_875;
wire   [5:0] j_2_fu_724_p2;
wire   [31:0] val_assign_fu_730_p1;
wire   [0:0] ap_CS_fsm_state4;
reg   [9:0] a_address0;
reg    a_ce0;
reg    a_we0;
wire   [31:0] a_d0;
reg   [9:0] b_address0;
reg    b_ce0;
reg    b_we0;
wire   [31:0] b_d0;
reg   [9:0] out_address0;
reg    out_ce0;
reg    out_we0;
wire   [31:0] out_q0;
reg   [5:0] i_0_i_phi_fu_234_p4;
reg   [5:0] i1_0_i_phi_fu_267_p4;
reg   [5:0] ia_0_i_i_reg_285;
wire   [0:0] exitcond1_i_i_fu_569_p2;
wire   [0:0] ap_CS_fsm_state7;
reg   [5:0] ib_0_i_i_reg_296;
wire   [0:0] exitcond_i_i_fu_617_p2;
reg   [31:0] sum_0_i_i_reg_307;
reg   [5:0] id_0_i_i_reg_320;
reg   [5:0] i4_0_i_phi_fu_346_p4;
wire   [31:0] tmp_6_cast_fu_445_p1;
wire   [31:0] tmp_10_cast_fu_521_p1;
wire   [31:0] tmp_13_cast_fu_564_p1;
wire   [31:0] tmp_18_cast_fu_590_p1;
wire   [31:0] tmp_21_cast_fu_612_p1;
wire   [31:0] tmp_17_cast_fu_707_p1;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] exitcond4_i_fu_397_p2;
wire   [5:0] i_fu_391_p2;
wire   [10:0] tmp_fu_425_p3;
wire   [11:0] j_0_i_cast_cast_fu_436_p1;
wire   [11:0] tmp_1_cast_fu_432_p1;
wire   [11:0] tmp_6_fu_439_p2;
wire   [0:0] exitcond2_i_fu_473_p2;
wire   [5:0] i_1_fu_467_p2;
wire   [10:0] tmp_8_fu_501_p3;
wire   [11:0] j2_0_i_cast8_cast_fu_512_p1;
wire   [11:0] tmp_9_cast_fu_508_p1;
wire   [11:0] tmp_1_fu_515_p2;
wire   [10:0] tmp_9_fu_531_p3;
wire   [11:0] tmp_10_fu_559_p2;
wire   [11:0] id_0_i_i_cast5_cast_fu_581_p1;
wire   [11:0] tmp_14_fu_585_p2;
wire   [10:0] tmp_15_fu_595_p3;
wire   [11:0] tmp_20_cast_fu_603_p1;
wire   [11:0] tmp_16_fu_607_p2;
wire   [0:0] exitcond_i_fu_647_p2;
wire   [5:0] i_2_fu_641_p2;
wire   [10:0] tmp_11_fu_669_p3;
wire   [4:0] tmp_12_fu_681_p1;
wire   [5:0] j5_0_i_mid2_fu_653_p3;
wire   [11:0] tmp_15_cast_fu_677_p1;
wire   [11:0] j5_0_i_cast1_cast_fu_697_p1;
wire   [11:0] tmp_13_fu_701_p2;
wire   [9:0] tmp_9_mid2_fu_685_p3;
wire   [9:0] j5_0_i_cast2_fu_693_p1;
wire   [9:0] k_fu_712_p2;
wire   [0:0] ap_CS_fsm_state23;
reg    ap_condition_1465;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'b1;
#0 INPUT_STREAM_data_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_data_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_data_V_0_state = 2'b00;
#0 INPUT_STREAM_dest_V_0_state = 2'b00;
#0 OUTPUT_STREAM_data_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_data_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_data_V_1_state = 2'b00;
#0 OUTPUT_STREAM_keep_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_keep_V_1_state = 2'b00;
#0 OUTPUT_STREAM_strb_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_strb_V_1_state = 2'b00;
#0 OUTPUT_STREAM_user_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_user_V_1_state = 2'b00;
#0 OUTPUT_STREAM_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_last_V_1_state = 2'b00;
#0 OUTPUT_STREAM_id_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_id_V_1_state = 2'b00;
#0 OUTPUT_STREAM_dest_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_dest_V_1_state = 2'b00;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

HLS_accel_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
HLS_accel_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

HLS_accel_a #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
a_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_address0),
    .ce0(a_ce0),
    .we0(a_we0),
    .d0(a_d0),
    .q0(a_q0)
);

HLS_accel_a #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b_address0),
    .ce0(b_ce0),
    .we0(b_we0),
    .d0(b_d0),
    .q0(b_q0)
);

HLS_accel_a #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_address0),
    .ce0(out_ce0),
    .we0(out_we0),
    .d0(sum_0_i_i_reg_307),
    .q0(out_q0)
);

HLS_accel_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
HLS_accel_fadd_32bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_0_i_i_reg_307),
    .din1(tmp_s_reg_846),
    .ce(1'b1),
    .dout(grp_fu_364_p2)
);

HLS_accel_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
HLS_accel_fmul_32cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(a_q0),
    .din1(b_q0),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_data_V_0_vld_out))) begin
            INPUT_STREAM_data_V_0_sel_rd <= ~INPUT_STREAM_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_data_V_0_ack_in))) begin
            INPUT_STREAM_data_V_0_sel_wr <= ~INPUT_STREAM_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_data_V_0_ack_out) & (INPUT_STREAM_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == INPUT_STREAM_data_V_0_vld_in) & (INPUT_STREAM_data_V_0_state == ap_const_lv2_2)))) begin
            INPUT_STREAM_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == INPUT_STREAM_data_V_0_vld_in) & (1'b0 == INPUT_STREAM_data_V_0_ack_out) & (INPUT_STREAM_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == INPUT_STREAM_data_V_0_ack_out) & (INPUT_STREAM_data_V_0_state == ap_const_lv2_1)))) begin
            INPUT_STREAM_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == INPUT_STREAM_data_V_0_vld_in) & (INPUT_STREAM_data_V_0_state == ap_const_lv2_2)) | ((1'b1 == INPUT_STREAM_data_V_0_ack_out) & (INPUT_STREAM_data_V_0_state == ap_const_lv2_1)) | ((INPUT_STREAM_data_V_0_state == ap_const_lv2_3) & ~((1'b1 == INPUT_STREAM_data_V_0_vld_in) & (1'b0 == INPUT_STREAM_data_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_data_V_0_ack_out))))) begin
            INPUT_STREAM_data_V_0_state <= ap_const_lv2_3;
        end else begin
            INPUT_STREAM_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_dest_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_dest_V_0_ack_out) & (ap_const_lv2_3 == INPUT_STREAM_dest_V_0_state)) | ((1'b0 == INPUT_STREAM_dest_V_0_vld_in) & (ap_const_lv2_2 == INPUT_STREAM_dest_V_0_state)))) begin
            INPUT_STREAM_dest_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == INPUT_STREAM_dest_V_0_vld_in) & (1'b0 == INPUT_STREAM_dest_V_0_ack_out) & (ap_const_lv2_3 == INPUT_STREAM_dest_V_0_state)) | ((1'b0 == INPUT_STREAM_dest_V_0_ack_out) & (ap_const_lv2_1 == INPUT_STREAM_dest_V_0_state)))) begin
            INPUT_STREAM_dest_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == INPUT_STREAM_dest_V_0_vld_in) & (ap_const_lv2_2 == INPUT_STREAM_dest_V_0_state)) | ((1'b1 == INPUT_STREAM_dest_V_0_ack_out) & (ap_const_lv2_1 == INPUT_STREAM_dest_V_0_state)) | ((ap_const_lv2_3 == INPUT_STREAM_dest_V_0_state) & ~((1'b1 == INPUT_STREAM_dest_V_0_vld_in) & (1'b0 == INPUT_STREAM_dest_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_dest_V_0_ack_out))))) begin
            INPUT_STREAM_dest_V_0_state <= ap_const_lv2_3;
        end else begin
            INPUT_STREAM_dest_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_data_V_1_vld_out))) begin
            OUTPUT_STREAM_data_V_1_sel_rd <= ~OUTPUT_STREAM_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_data_V_1_ack_in))) begin
            OUTPUT_STREAM_data_V_1_sel_wr <= ~OUTPUT_STREAM_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_data_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_data_V_1_state)) | ((1'b0 == OUTPUT_STREAM_data_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_data_V_1_state)))) begin
            OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == OUTPUT_STREAM_data_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_data_V_1_state)) | ((1'b0 == OUTPUT_STREAM_data_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_data_V_1_state)))) begin
            OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == OUTPUT_STREAM_data_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_data_V_1_state)) | ((1'b1 == OUTPUT_STREAM_data_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_data_V_1_state)) | ((ap_const_lv2_3 == OUTPUT_STREAM_data_V_1_state) & ~((1'b1 == OUTPUT_STREAM_data_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_data_V_1_ack_out))))) begin
            OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_3;
        end else begin
            OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_dest_V_1_vld_out))) begin
            OUTPUT_STREAM_dest_V_1_sel_rd <= ~OUTPUT_STREAM_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_dest_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_dest_V_1_state)) | ((1'b0 == OUTPUT_STREAM_dest_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_dest_V_1_state)))) begin
            OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == OUTPUT_STREAM_dest_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_dest_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_dest_V_1_state)) | ((1'b0 == OUTPUT_STREAM_dest_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_dest_V_1_state)))) begin
            OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == OUTPUT_STREAM_dest_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_dest_V_1_state)) | ((1'b1 == OUTPUT_STREAM_dest_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_dest_V_1_state)) | ((ap_const_lv2_3 == OUTPUT_STREAM_dest_V_1_state) & ~((1'b1 == OUTPUT_STREAM_dest_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_dest_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_dest_V_1_ack_out))))) begin
            OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_3;
        end else begin
            OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_id_V_1_vld_out))) begin
            OUTPUT_STREAM_id_V_1_sel_rd <= ~OUTPUT_STREAM_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_id_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_id_V_1_state)) | ((1'b0 == OUTPUT_STREAM_id_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_id_V_1_state)))) begin
            OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == OUTPUT_STREAM_id_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_id_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_id_V_1_state)) | ((1'b0 == OUTPUT_STREAM_id_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_id_V_1_state)))) begin
            OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == OUTPUT_STREAM_id_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_id_V_1_state)) | ((1'b1 == OUTPUT_STREAM_id_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_id_V_1_state)) | ((ap_const_lv2_3 == OUTPUT_STREAM_id_V_1_state) & ~((1'b1 == OUTPUT_STREAM_id_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_id_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_id_V_1_ack_out))))) begin
            OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_3;
        end else begin
            OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_keep_V_1_vld_out))) begin
            OUTPUT_STREAM_keep_V_1_sel_rd <= ~OUTPUT_STREAM_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_keep_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_keep_V_1_state)) | ((1'b0 == OUTPUT_STREAM_keep_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_keep_V_1_state)))) begin
            OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == OUTPUT_STREAM_keep_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_keep_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_keep_V_1_state)) | ((1'b0 == OUTPUT_STREAM_keep_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_keep_V_1_state)))) begin
            OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == OUTPUT_STREAM_keep_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_keep_V_1_state)) | ((1'b1 == OUTPUT_STREAM_keep_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_keep_V_1_state)) | ((ap_const_lv2_3 == OUTPUT_STREAM_keep_V_1_state) & ~((1'b1 == OUTPUT_STREAM_keep_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_keep_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_keep_V_1_ack_out))))) begin
            OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_last_V_1_vld_out))) begin
            OUTPUT_STREAM_last_V_1_sel_rd <= ~OUTPUT_STREAM_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_last_V_1_ack_in))) begin
            OUTPUT_STREAM_last_V_1_sel_wr <= ~OUTPUT_STREAM_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_last_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_last_V_1_state)) | ((1'b0 == OUTPUT_STREAM_last_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_last_V_1_state)))) begin
            OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == OUTPUT_STREAM_last_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_last_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_last_V_1_state)) | ((1'b0 == OUTPUT_STREAM_last_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_last_V_1_state)))) begin
            OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == OUTPUT_STREAM_last_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_last_V_1_state)) | ((1'b1 == OUTPUT_STREAM_last_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_last_V_1_state)) | ((ap_const_lv2_3 == OUTPUT_STREAM_last_V_1_state) & ~((1'b1 == OUTPUT_STREAM_last_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_last_V_1_ack_out))))) begin
            OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_3;
        end else begin
            OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_strb_V_1_vld_out))) begin
            OUTPUT_STREAM_strb_V_1_sel_rd <= ~OUTPUT_STREAM_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_strb_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_strb_V_1_state)) | ((1'b0 == OUTPUT_STREAM_strb_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_strb_V_1_state)))) begin
            OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == OUTPUT_STREAM_strb_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_strb_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_strb_V_1_state)) | ((1'b0 == OUTPUT_STREAM_strb_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_strb_V_1_state)))) begin
            OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == OUTPUT_STREAM_strb_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_strb_V_1_state)) | ((1'b1 == OUTPUT_STREAM_strb_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_strb_V_1_state)) | ((ap_const_lv2_3 == OUTPUT_STREAM_strb_V_1_state) & ~((1'b1 == OUTPUT_STREAM_strb_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_strb_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_strb_V_1_ack_out))))) begin
            OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_3;
        end else begin
            OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_user_V_1_vld_out))) begin
            OUTPUT_STREAM_user_V_1_sel_rd <= ~OUTPUT_STREAM_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_user_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_user_V_1_state)) | ((1'b0 == OUTPUT_STREAM_user_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_user_V_1_state)))) begin
            OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == OUTPUT_STREAM_user_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_user_V_1_ack_out) & (ap_const_lv2_3 == OUTPUT_STREAM_user_V_1_state)) | ((1'b0 == OUTPUT_STREAM_user_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_user_V_1_state)))) begin
            OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == OUTPUT_STREAM_user_V_1_vld_in) & (ap_const_lv2_2 == OUTPUT_STREAM_user_V_1_state)) | ((1'b1 == OUTPUT_STREAM_user_V_1_ack_out) & (ap_const_lv2_1 == OUTPUT_STREAM_user_V_1_state)) | ((ap_const_lv2_3 == OUTPUT_STREAM_user_V_1_state) & ~((1'b1 == OUTPUT_STREAM_user_V_1_vld_in) & (1'b0 == OUTPUT_STREAM_user_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_user_V_1_ack_out))))) begin
            OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_3;
        end else begin
            OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond_flatten_fu_379_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b0 == exitcond_flatten_fu_379_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond_flatten_fu_379_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond_flatten8_fu_455_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b0 == exitcond_flatten8_fu_455_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond_flatten8_fu_455_p2)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & ~(1'b0 == exitcond_flatten1_fu_629_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond2_i_i_fu_543_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b0 == exitcond_flatten1_fu_629_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond2_i_i_fu_543_p2)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & ~(1'b0 == exitcond_flatten1_fu_629_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond2_i_i_fu_543_p2))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_i_reg_263 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)))) begin
        i1_0_i_reg_263 <= i1_0_i_cast9_mid2_v_reg_774;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond2_i_i_fu_543_p2))) begin
        i4_0_i_reg_342 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        i4_0_i_reg_342 <= i4_0_i_cast4_mid2_v_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)))) begin
        i_0_i_reg_230 <= i_0_i_cast_mid2_v_reg_749;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_0_i_reg_230 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ia_0_i_i_reg_285 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == exitcond1_i_i_fu_569_p2))) begin
        ia_0_i_i_reg_285 <= ia_reg_795;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond_i_i_fu_617_p2))) begin
        ib_0_i_i_reg_296 <= ib_reg_813;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond2_i_i_fu_543_p2))) begin
        ib_0_i_i_reg_296 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        id_0_i_i_reg_320 <= id_reg_831;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond1_i_i_fu_569_p2))) begin
        id_0_i_i_reg_320 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond2_i_i_fu_543_p2))) begin
        indvar_flatten1_reg_331 <= ap_const_lv11_0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond_flatten1_fu_629_p2))) begin
        indvar_flatten1_reg_331 <= indvar_flatten_next1_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten6_reg_252 <= ap_const_lv11_0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_flatten8_fu_455_p2))) begin
        indvar_flatten6_reg_252 <= indvar_flatten_next7_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_379_p2))) begin
        indvar_flatten_reg_219 <= indvar_flatten_next_fu_385_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_219 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j2_0_i_reg_274 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_flatten8_fu_455_p2))) begin
        j2_0_i_reg_274 <= j_1_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond2_i_i_fu_543_p2))) begin
        j5_0_i_reg_353 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond_flatten1_fu_629_p2))) begin
        j5_0_i_reg_353 <= j_2_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_379_p2))) begin
        j_0_i_reg_241 <= j_fu_419_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_0_i_reg_241 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sum_0_i_i_reg_307 <= grp_fu_364_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond1_i_i_fu_569_p2))) begin
        sum_0_i_i_reg_307 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_data_V_0_load_A)) begin
        INPUT_STREAM_data_V_0_payload_A <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_data_V_0_load_B)) begin
        INPUT_STREAM_data_V_0_payload_B <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_data_V_1_load_A)) begin
        OUTPUT_STREAM_data_V_1_payload_A <= val_assign_fu_730_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_data_V_1_load_B)) begin
        OUTPUT_STREAM_data_V_1_payload_B <= val_assign_fu_730_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_last_V_1_load_A)) begin
        OUTPUT_STREAM_last_V_1_payload_A <= last_assign_reg_875;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_last_V_1_load_B)) begin
        OUTPUT_STREAM_last_V_1_payload_B <= last_assign_reg_875;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856 <= exitcond_flatten1_reg_856;
        exitcond_flatten1_reg_856 <= exitcond_flatten1_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)))) begin
        exitcond_flatten8_reg_760 <= exitcond_flatten8_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)))) begin
        exitcond_flatten_reg_735 <= exitcond_flatten_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_flatten8_fu_455_p2))) begin
        i1_0_i_cast9_mid2_v_reg_774 <= i1_0_i_cast9_mid2_v_fu_487_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond_flatten1_fu_629_p2))) begin
        i4_0_i_cast4_mid2_v_reg_865 <= i4_0_i_cast4_mid2_v_fu_661_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_379_p2))) begin
        i_0_i_cast_mid2_v_reg_749 <= i_0_i_cast_mid2_v_fu_411_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ia_reg_795 <= ia_fu_549_p2;
        tmp_12_cast_reg_785[10 : 5] <= tmp_12_cast_fu_539_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ib_0_i_i_cast6_cast_reg_800[5 : 0] <= ib_0_i_i_cast6_cast_fu_555_p1[5 : 0];
        ib_reg_813 <= ib_fu_575_p2;
        out_addr_reg_805 <= tmp_13_cast_fu_564_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        id_reg_831 <= id_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b0 == exitcond_flatten8_fu_455_p2))) begin
        j2_0_i_mid2_reg_769 <= j2_0_i_mid2_fu_479_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b0 == exitcond_flatten_fu_379_p2))) begin
        j_0_i_mid2_reg_744 <= j_0_i_mid2_fu_403_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b0 == exitcond_flatten1_fu_629_p2))) begin
        last_assign_reg_875 <= last_assign_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_s_reg_846 <= grp_fu_369_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760)))) begin
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_data_V_0_state[1'b0];
    end else begin
        INPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0))))) begin
        INPUT_STREAM_data_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_data_V_0_sel)) begin
        INPUT_STREAM_data_V_0_data_out = INPUT_STREAM_data_V_0_payload_B;
    end else begin
        INPUT_STREAM_data_V_0_data_out = INPUT_STREAM_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0))))) begin
        INPUT_STREAM_dest_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856)))) begin
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_data_V_1_state[1'b1];
    end else begin
        OUTPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_data_V_1_sel)) begin
        OUTPUT_STREAM_data_V_1_data_out = OUTPUT_STREAM_data_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_data_V_1_data_out = OUTPUT_STREAM_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        OUTPUT_STREAM_data_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        OUTPUT_STREAM_dest_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        OUTPUT_STREAM_id_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        OUTPUT_STREAM_keep_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_last_V_1_sel)) begin
        OUTPUT_STREAM_last_V_1_data_out = OUTPUT_STREAM_last_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_last_V_1_data_out = OUTPUT_STREAM_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        OUTPUT_STREAM_last_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        OUTPUT_STREAM_strb_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))))) begin
        OUTPUT_STREAM_user_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_address0 = tmp_18_cast_fu_590_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        a_address0 = tmp_6_cast_fu_445_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0))))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & ~(ap_condition_1465 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & ~(ap_condition_1465 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_address0 = tmp_21_cast_fu_612_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        b_address0 = tmp_10_cast_fu_521_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0))))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760))) begin
        i1_0_i_phi_fu_267_p4 = i1_0_i_cast9_mid2_v_reg_774;
    end else begin
        i1_0_i_phi_fu_267_p4 = i1_0_i_reg_263;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856))) begin
        i4_0_i_phi_fu_346_p4 = i4_0_i_cast4_mid2_v_reg_865;
    end else begin
        i4_0_i_phi_fu_346_p4 = i4_0_i_reg_342;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735))) begin
        i_0_i_phi_fu_234_p4 = i_0_i_cast_mid2_v_reg_749;
    end else begin
        i_0_i_phi_fu_234_p4 = i_0_i_reg_230;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        out_address0 = tmp_17_cast_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_address0 = out_addr_reg_805;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp2_iter0)))) begin
        out_ce0 = 1'b1;
    end else begin
        out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond_i_i_fu_617_p2))) begin
        out_we0 = 1'b1;
    end else begin
        out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_379_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_735) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_379_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond_flatten8_fu_455_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_flatten8_reg_760) & (INPUT_STREAM_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond_flatten8_fu_455_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == exitcond2_i_i_fu_543_p2)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == exitcond1_i_i_fu_569_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == exitcond_i_i_fu_617_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter2) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp2_iter1)) & ~(~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond_flatten1_fu_629_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp2_iter2) & ~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp2_iter1)) | (~(((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond_flatten1_reg_856) & (1'b0 == OUTPUT_STREAM_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond_flatten1_fu_629_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            if (~(ap_condition_1465 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_STREAM_TREADY = INPUT_STREAM_dest_V_0_state[1'b1];

assign INPUT_STREAM_data_V_0_ack_in = INPUT_STREAM_data_V_0_state[1'b1];

assign INPUT_STREAM_data_V_0_load_A = (INPUT_STREAM_data_V_0_state_cmp_full & ~INPUT_STREAM_data_V_0_sel_wr);

assign INPUT_STREAM_data_V_0_load_B = (INPUT_STREAM_data_V_0_sel_wr & INPUT_STREAM_data_V_0_state_cmp_full);

assign INPUT_STREAM_data_V_0_sel = INPUT_STREAM_data_V_0_sel_rd;

assign INPUT_STREAM_data_V_0_state_cmp_full = ((INPUT_STREAM_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_data_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_data_V_0_vld_out = INPUT_STREAM_data_V_0_state[1'b0];

assign INPUT_STREAM_dest_V_0_vld_in = INPUT_STREAM_TVALID;

assign OUTPUT_STREAM_TDATA = OUTPUT_STREAM_data_V_1_data_out;

assign OUTPUT_STREAM_TDEST = OUTPUT_STREAM_dest_V_1_data_out;

assign OUTPUT_STREAM_TID = OUTPUT_STREAM_id_V_1_data_out;

assign OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_keep_V_1_data_out;

assign OUTPUT_STREAM_TLAST = OUTPUT_STREAM_last_V_1_data_out;

assign OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_strb_V_1_data_out;

assign OUTPUT_STREAM_TUSER = OUTPUT_STREAM_user_V_1_data_out;

assign OUTPUT_STREAM_TVALID = OUTPUT_STREAM_dest_V_1_state[1'b0];

assign OUTPUT_STREAM_data_V_1_ack_in = OUTPUT_STREAM_data_V_1_state[1'b1];

assign OUTPUT_STREAM_data_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_data_V_1_load_A = (OUTPUT_STREAM_data_V_1_state_cmp_full & ~OUTPUT_STREAM_data_V_1_sel_wr);

assign OUTPUT_STREAM_data_V_1_load_B = (OUTPUT_STREAM_data_V_1_sel_wr & OUTPUT_STREAM_data_V_1_state_cmp_full);

assign OUTPUT_STREAM_data_V_1_sel = OUTPUT_STREAM_data_V_1_sel_rd;

assign OUTPUT_STREAM_data_V_1_state_cmp_full = ((OUTPUT_STREAM_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_data_V_1_vld_out = OUTPUT_STREAM_data_V_1_state[1'b0];

assign OUTPUT_STREAM_dest_V_1_ack_in = OUTPUT_STREAM_dest_V_1_state[1'b1];

assign OUTPUT_STREAM_dest_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_dest_V_1_data_out = ap_const_lv5_0;

assign OUTPUT_STREAM_dest_V_1_sel = OUTPUT_STREAM_dest_V_1_sel_rd;

assign OUTPUT_STREAM_dest_V_1_vld_out = OUTPUT_STREAM_dest_V_1_state[1'b0];

assign OUTPUT_STREAM_id_V_1_ack_in = OUTPUT_STREAM_id_V_1_state[1'b1];

assign OUTPUT_STREAM_id_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_id_V_1_data_out = ap_const_lv5_0;

assign OUTPUT_STREAM_id_V_1_sel = OUTPUT_STREAM_id_V_1_sel_rd;

assign OUTPUT_STREAM_id_V_1_vld_out = OUTPUT_STREAM_id_V_1_state[1'b0];

assign OUTPUT_STREAM_keep_V_1_ack_in = OUTPUT_STREAM_keep_V_1_state[1'b1];

assign OUTPUT_STREAM_keep_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_keep_V_1_data_out = ap_const_lv4_F;

assign OUTPUT_STREAM_keep_V_1_sel = OUTPUT_STREAM_keep_V_1_sel_rd;

assign OUTPUT_STREAM_keep_V_1_vld_out = OUTPUT_STREAM_keep_V_1_state[1'b0];

assign OUTPUT_STREAM_last_V_1_ack_in = OUTPUT_STREAM_last_V_1_state[1'b1];

assign OUTPUT_STREAM_last_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_last_V_1_load_A = (OUTPUT_STREAM_last_V_1_state_cmp_full & ~OUTPUT_STREAM_last_V_1_sel_wr);

assign OUTPUT_STREAM_last_V_1_load_B = (OUTPUT_STREAM_last_V_1_sel_wr & OUTPUT_STREAM_last_V_1_state_cmp_full);

assign OUTPUT_STREAM_last_V_1_sel = OUTPUT_STREAM_last_V_1_sel_rd;

assign OUTPUT_STREAM_last_V_1_state_cmp_full = ((OUTPUT_STREAM_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_last_V_1_vld_out = OUTPUT_STREAM_last_V_1_state[1'b0];

assign OUTPUT_STREAM_strb_V_1_ack_in = OUTPUT_STREAM_strb_V_1_state[1'b1];

assign OUTPUT_STREAM_strb_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_strb_V_1_data_out = ap_const_lv4_F;

assign OUTPUT_STREAM_strb_V_1_sel = OUTPUT_STREAM_strb_V_1_sel_rd;

assign OUTPUT_STREAM_strb_V_1_vld_out = OUTPUT_STREAM_strb_V_1_state[1'b0];

assign OUTPUT_STREAM_user_V_1_ack_in = OUTPUT_STREAM_user_V_1_state[1'b1];

assign OUTPUT_STREAM_user_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_user_V_1_data_out = ap_const_lv4_0;

assign OUTPUT_STREAM_user_V_1_sel = OUTPUT_STREAM_user_V_1_sel_rd;

assign OUTPUT_STREAM_user_V_1_vld_out = OUTPUT_STREAM_user_V_1_state[1'b0];

assign a_d0 = INPUT_STREAM_data_V_0_data_out;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_6];

always @ (*) begin
    ap_condition_1465 = ((OUTPUT_STREAM_data_V_1_ack_in == 1'b0) | (OUTPUT_STREAM_keep_V_1_ack_in == 1'b0) | (OUTPUT_STREAM_strb_V_1_ack_in == 1'b0) | (OUTPUT_STREAM_user_V_1_ack_in == 1'b0) | (OUTPUT_STREAM_last_V_1_ack_in == 1'b0) | (OUTPUT_STREAM_id_V_1_ack_in == 1'b0) | (OUTPUT_STREAM_dest_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_d0 = INPUT_STREAM_data_V_0_data_out;

assign exitcond1_i_i_fu_569_p2 = ((ib_0_i_i_reg_296 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_473_p2 = ((j2_0_i_reg_274 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond2_i_i_fu_543_p2 = ((ia_0_i_i_reg_285 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond4_i_fu_397_p2 = ((j_0_i_reg_241 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_629_p2 = ((indvar_flatten1_reg_331 == ap_const_lv11_400) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_455_p2 = ((indvar_flatten6_reg_252 == ap_const_lv11_400) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_379_p2 = ((indvar_flatten_reg_219 == ap_const_lv11_400) ? 1'b1 : 1'b0);

assign exitcond_i_fu_647_p2 = ((j5_0_i_reg_353 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_617_p2 = ((id_0_i_i_reg_320 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign i1_0_i_cast9_mid2_v_fu_487_p3 = ((exitcond2_i_fu_473_p2[0:0] === 1'b1) ? i_1_fu_467_p2 : i1_0_i_phi_fu_267_p4);

assign i4_0_i_cast4_mid2_v_fu_661_p3 = ((exitcond_i_fu_647_p2[0:0] === 1'b1) ? i_2_fu_641_p2 : i4_0_i_phi_fu_346_p4);

assign i_0_i_cast_mid2_v_fu_411_p3 = ((exitcond4_i_fu_397_p2[0:0] === 1'b1) ? i_fu_391_p2 : i_0_i_phi_fu_234_p4);

assign i_1_fu_467_p2 = (i1_0_i_phi_fu_267_p4 + ap_const_lv6_1);

assign i_2_fu_641_p2 = (ap_const_lv6_1 + i4_0_i_phi_fu_346_p4);

assign i_fu_391_p2 = (i_0_i_phi_fu_234_p4 + ap_const_lv6_1);

assign ia_fu_549_p2 = (ia_0_i_i_reg_285 + ap_const_lv6_1);

assign ib_0_i_i_cast6_cast_fu_555_p1 = ib_0_i_i_reg_296;

assign ib_fu_575_p2 = (ib_0_i_i_reg_296 + ap_const_lv6_1);

assign id_0_i_i_cast5_cast_fu_581_p1 = id_0_i_i_reg_320;

assign id_fu_623_p2 = (id_0_i_i_reg_320 + ap_const_lv6_1);

assign indvar_flatten_next1_fu_635_p2 = (indvar_flatten1_reg_331 + ap_const_lv11_1);

assign indvar_flatten_next7_fu_461_p2 = (indvar_flatten6_reg_252 + ap_const_lv11_1);

assign indvar_flatten_next_fu_385_p2 = (indvar_flatten_reg_219 + ap_const_lv11_1);

assign j2_0_i_cast8_cast_fu_512_p1 = j2_0_i_mid2_reg_769;

assign j2_0_i_mid2_fu_479_p3 = ((exitcond2_i_fu_473_p2[0:0] === 1'b1) ? ap_const_lv6_0 : j2_0_i_reg_274);

assign j5_0_i_cast1_cast_fu_697_p1 = j5_0_i_mid2_fu_653_p3;

assign j5_0_i_cast2_fu_693_p1 = j5_0_i_mid2_fu_653_p3;

assign j5_0_i_mid2_fu_653_p3 = ((exitcond_i_fu_647_p2[0:0] === 1'b1) ? ap_const_lv6_0 : j5_0_i_reg_353);

assign j_0_i_cast_cast_fu_436_p1 = j_0_i_mid2_reg_744;

assign j_0_i_mid2_fu_403_p3 = ((exitcond4_i_fu_397_p2[0:0] === 1'b1) ? ap_const_lv6_0 : j_0_i_reg_241);

assign j_1_fu_495_p2 = (j2_0_i_mid2_fu_479_p3 + ap_const_lv6_1);

assign j_2_fu_724_p2 = (ap_const_lv6_1 + j5_0_i_mid2_fu_653_p3);

assign j_fu_419_p2 = (j_0_i_mid2_fu_403_p3 + ap_const_lv6_1);

assign k_fu_712_p2 = (tmp_9_mid2_fu_685_p3 + j5_0_i_cast2_fu_693_p1);

assign last_assign_fu_718_p2 = ((k_fu_712_p2 == ap_const_lv10_3FF) ? 1'b1 : 1'b0);

assign tmp_10_cast_fu_521_p1 = tmp_1_fu_515_p2;

assign tmp_10_fu_559_p2 = (tmp_12_cast_reg_785 + ib_0_i_i_cast6_cast_fu_555_p1);

assign tmp_11_fu_669_p3 = {{i4_0_i_cast4_mid2_v_fu_661_p3}, {ap_const_lv5_0}};

assign tmp_12_cast_fu_539_p1 = tmp_9_fu_531_p3;

assign tmp_12_fu_681_p1 = i4_0_i_cast4_mid2_v_fu_661_p3[4:0];

assign tmp_13_cast_fu_564_p1 = tmp_10_fu_559_p2;

assign tmp_13_fu_701_p2 = (tmp_15_cast_fu_677_p1 + j5_0_i_cast1_cast_fu_697_p1);

assign tmp_14_fu_585_p2 = (id_0_i_i_cast5_cast_fu_581_p1 + tmp_12_cast_reg_785);

assign tmp_15_cast_fu_677_p1 = tmp_11_fu_669_p3;

assign tmp_15_fu_595_p3 = {{id_0_i_i_reg_320}, {ap_const_lv5_0}};

assign tmp_16_fu_607_p2 = (ib_0_i_i_cast6_cast_reg_800 + tmp_20_cast_fu_603_p1);

assign tmp_17_cast_fu_707_p1 = tmp_13_fu_701_p2;

assign tmp_18_cast_fu_590_p1 = tmp_14_fu_585_p2;

assign tmp_1_cast_fu_432_p1 = tmp_fu_425_p3;

assign tmp_1_fu_515_p2 = (j2_0_i_cast8_cast_fu_512_p1 + tmp_9_cast_fu_508_p1);

assign tmp_20_cast_fu_603_p1 = tmp_15_fu_595_p3;

assign tmp_21_cast_fu_612_p1 = tmp_16_fu_607_p2;

assign tmp_6_cast_fu_445_p1 = tmp_6_fu_439_p2;

assign tmp_6_fu_439_p2 = (j_0_i_cast_cast_fu_436_p1 + tmp_1_cast_fu_432_p1);

assign tmp_8_fu_501_p3 = {{i1_0_i_cast9_mid2_v_reg_774}, {ap_const_lv5_0}};

assign tmp_9_cast_fu_508_p1 = tmp_8_fu_501_p3;

assign tmp_9_fu_531_p3 = {{ia_0_i_i_reg_285}, {ap_const_lv5_0}};

assign tmp_9_mid2_fu_685_p3 = {{tmp_12_fu_681_p1}, {ap_const_lv5_0}};

assign tmp_fu_425_p3 = {{i_0_i_cast_mid2_v_reg_749}, {ap_const_lv5_0}};

assign val_assign_fu_730_p1 = out_q0;

always @ (posedge ap_clk) begin
    tmp_12_cast_reg_785[4:0] <= 5'b00000;
    tmp_12_cast_reg_785[11] <= 1'b0;
    ib_0_i_i_cast6_cast_reg_800[11:6] <= 6'b000000;
end

endmodule //HLS_accel
